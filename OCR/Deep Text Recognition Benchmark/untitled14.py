# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E9JHWQoaNmSOBciG7vBGKKborTmwaljh
"""

! pip install -q lmdb fire

! git clone https://github.com/clovaai/deep-text-recognition-benchmark.git

# Commented out IPython magic to ensure Python compatibility.
# %cd deep-text-recognition-benchmark

! gdown 1ubkg7E2vGEOqS4K_quwf9Vl-i8IVpklM

! gdown 1AL5Zsg2hDqcwF8ZmR0MJTbjgXIoE5W-I

!unzip /content/deep-text-recognition-benchmark/plate_img-train.zip -d /content/Dataset/
!unzip /content/deep-text-recognition-benchmark/plate_img-validation.zip -d /content/Dataset/

"""```python
def _accumulate(iterable):
    'Return running totals'
    total = 0
    for value in iterable:
        total += value
        yield total
```
"""

!gdown 1b59rXuGGmKne1AuHnkgDzoYgKeETNMv9

!python3 demo.py \
--Transformation TPS --FeatureExtraction ResNet --SequenceModeling BiLSTM --Prediction Attn \
--image_folder demo_image/ \
--saved_model TPS-ResNet-BiLSTM-Attn.pth

import os
import xml.etree.ElementTree as ET

train_dir = '/content/Dataset/train'
output_file = '/content/deep-text-recognition-benchmark/data/gt_train.txt'
lines = []

for filename in os.listdir(train_dir):
    if filename.endswith('.xml'):
        xml_path = os.path.join(train_dir, filename)
        tree = ET.parse(xml_path)
        root = tree.getroot()

        image_name = root.find('filename').text
        image_path = os.path.join(train_dir, image_name)

        chars = []
        for obj in root.findall('object'):
            name = obj.find('name').text
            bbox = obj.find('bndbox')
            xmin = int(bbox.find('xmin').text)
            chars.append((xmin, name))

        # Sort characters from left to right
        chars = sorted(chars, key=lambda x: x[0])
        label = ''.join([char[1] for char in chars])

        lines.append(f'{image_path}\t{label}')

# Save to gt.txt
with open(os.path.join(train_dir, output_file), 'w', encoding='utf-8') as f:
    for line in lines:
        f.write(line + '\n')

print(f'Done! {len(lines)} items written to {output_file}')

import os
import xml.etree.ElementTree as ET

train_dir = '/content/Dataset/validation'
output_file = '/content/deep-text-recognition-benchmark/data/gt_validation.txt'
lines = []

for filename in os.listdir(train_dir):
    if filename.endswith('.xml'):
        xml_path = os.path.join(train_dir, filename)
        tree = ET.parse(xml_path)
        root = tree.getroot()

        image_name = root.find('filename').text
        image_path = os.path.join(train_dir, image_name)

        chars = []
        for obj in root.findall('object'):
            name = obj.find('name').text
            bbox = obj.find('bndbox')
            xmin = int(bbox.find('xmin').text)
            chars.append((xmin, name))

        # Sort characters from left to right
        chars = sorted(chars, key=lambda x: x[0])
        label = ''.join([char[1] for char in chars])

        lines.append(f'{image_path}\t{label}')

# Save to gt.txt
with open(os.path.join(train_dir, output_file), 'w', encoding='utf-8') as f:
    for line in lines:
        f.write(line + '\n')

print(f'Done! {len(lines)} items written to {output_file}')

import os
import shutil

source_dir = '/content/Dataset/train'
destination_dir = '/content/deep-text-recognition-benchmark/data/train/'

os.makedirs(destination_dir, exist_ok=True)

for filename in os.listdir(source_dir):
    if filename.lower().endswith('.jpg'):
        src_path = os.path.join(source_dir, filename)
        dst_path = os.path.join(destination_dir, filename)
        shutil.move(src_path, dst_path)

print("Done train data!")

source_dir = '/content/Dataset/validation'
destination_dir = '/content/deep-text-recognition-benchmark/data/validation'

os.makedirs(destination_dir, exist_ok=True)

for filename in os.listdir(source_dir):
    if filename.lower().endswith('.jpg'):
        src_path = os.path.join(source_dir, filename)
        dst_path = os.path.join(destination_dir, filename)
        shutil.move(src_path, dst_path)

print("Done validation data !")

!python3 create_lmdb_dataset.py --inputPath data/ --gtFile data/gt_train.txt --outputPath dataset/train

!python3 create_lmdb_dataset.py --inputPath data/ --gtFile data/gt_validation.txt --outputPath dataset/validation

!python3 train.py \
--train_data dataset/train --valid_data dataset/validation \
--select_data / --batch_ratio 1 --batch_max_length 8 --valInterval 100 \
--Transformation TPS --FeatureExtraction ResNet --SequenceModeling BiLSTM --Prediction Attn